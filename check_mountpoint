#!/usr/bin/perl -w
#
# Nagios plugin to check the mountpoint/partition a given file or 
# directory is on
# 

use strict;
use File::Basename;
use Nagios::Plugin;
use File::Mountpoint qw(is_mountpoint);

my $np = Nagios::Plugin->new(
  usage => q(Usage: %s [-v] [--missing-ok] -m <mountpoint> <path1> [<path2> ...]),
  version => '0.01',
  url => 'http://www.openfusion.com.au/labs/nagios/',
  blurb => q(This plugin checks the mountpoint of a given file/directory.),
);

$np->add_arg(
  spec => "mountpoint|m=s",
  help => qq(-m, --mountpoint=STRING
   Mountpoint on which given file/directory should be located.),
  required => 1);
$np->add_arg(
  spec => "missing-ok",
  help => qq(--missing-ok
   Don't give warnings on non-existent paths.),
  required => 0);

$np->getopts;
my $mountpoint = $np->opts->mountpoint;

$np->die("No paths found to check\n") 
  unless @ARGV;
$np->die("Mountpoint '$mountpoint' does not exist\n") 
  unless -e $mountpoint;
$np->die("Mountpoint '$mountpoint' is not a mountpoint\n") 
  unless -d $mountpoint && ! -l $mountpoint && is_mountpoint($mountpoint);

# Check the given path, returning true if on the given mountpoint, false if not,
# and dying on error
sub check_path_mountpoint {
  my ($mountpoint, $path) = @_;

  if (! -e $path) {
    die "Not found: $path\n" unless $np->opts->get('missing-ok');
    return 1;
  }

  # If a symlink, set path to target
  if (-l $path) {
    my $target = readlink $path;
    die "Broken link: '$path' points to non-existent '$target'\n" unless -e $target;
    $path = $target;
  }
  # If not a symlink, return if a mountpoint, otherwise check next level up
  else {
    if (-d $path && is_mountpoint($path)) {
      return $path eq $mountpoint;
    }
    $path = dirname $path;
  }
  return check_path_mountpoint($mountpoint, $path);
}

my (@ok, @warning, @critical);
for my $path ( @ARGV ) {
  my $on_mountpoint = eval { check_path_mountpoint($mountpoint, $path) };
  if ($@) {
    chomp $@;
    push @warning, $@;
  }
  else {
    if ($on_mountpoint) {
      push @ok, $path;
    } else {
      push @critical, $path;
    }
  }
}

if (@critical) {
  $np->nagios_exit( CRITICAL => "Not on mountpoint $mountpoint: " . join(' ', @critical) );
} 
elsif (@warning) {
  $np->nagios_exit( WARNING => join(', ', @warning) );
}
else {
  $np->nagios_exit( OK => "Mounted on $mountpoint: " . join(' ', @ok) );
}

