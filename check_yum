#!/usr/bin/perl -w
#
# check_yum/check_up2date - nagios plugin to check for outstanding updates via yum
# (or via dbus if invoked as check_yum_dbus, or up2date if invoked as check_up2date)
#

package check_yum;

use strict;
use File::Basename;
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Functions 0.1301;

sub new
{
  my $class = shift;

  my $self = bless {
    plugin => basename($ENV{NAGIOS_PLUGIN} || $0),
  }, $class;

  ($self->{mode} = $self->{plugin}) =~ s/^check_//;

  return $self;
}

sub getopts_constructor_args
{
  my $self = shift;
  return (
    usage => qq(Usage: %s [-d default-level ] [-t timeout] [-v]
                 [-w warning-pkgs] [-W warning-repos]
                 [-c critical-pkgs] [-C critical-repos]
                 [-x exclude-pkgs] [-X exclude-repos]\n),
    version => '0.05',
    url => 'http://www.openfusion.com.au/labs/nagios/',
    blurb => qq(This plugin checks for outstanding package updates via yum or up2date.),
    extra => qq/
Package lists (-w, -c, -x etc.) take precedence over repository lists
(-W, -C, -X etc.).

Tokens in package lists may include glob-style wildcards, as well as literals
e.g. -x 'kernel*' -c 'httpd*,mod_*,rsync'. Repository lists do NOT support
wildcards, however.

Note that $self->{plugin} probably needs to run as root to work correctly.),
    /,
  );
}

sub getopts_new
{
  my $self = shift;
  Nagios::Plugin::Getopt->new(
    $self->getopts_constructor_args
  );
}

sub getopts_add_args
{
  my $self = shift;
  my $ng = $self->{ng};
  $ng->arg("warning|w=s", qq(-w, --warning=STRING
    Packages (comma-separated) to treat as warnings));
  $ng->arg("critical|c=s", qq(-c, --critical=STRING
    Packages (comma-separated) to treat as critical));
  $ng->arg("exclude|x=s", qq(-x, --exclude=STRING
    Packages (comma-separated) to exclude/ignore));
  $ng->arg("warning-repo|W=s", qq(-W, --warning-repos=STRING
    Repositories (comma-separated) to treat as warnings));
  $ng->arg("critical-repo|C=s", qq(-C, --critical-repos=STRING
    Repositories (comma-separated) to treat as critical));
  $ng->arg("exclude-repo|X=s", qq(-X, --exclude-repos=STRING
    Repositories (comma-separated) to exclude/ignore));
  $ng->arg("default|d=s", qq(-d, --default=STRING
    Default level: c | w | x | critical | warning | exclude (default: %s)),
    'critical');
}

sub getopts
{
  my $self = shift;
  $self->{ng} = $self->getopts_new;
  $self->getopts_add_args;
  $self->{ng}->getopts;
}

# ------------------------------------------------------------------------
# Subroutines

# Setup package data structures
sub pkg_setup
{
  my ($self, $crit, $warn, $excl) = @_;

  $self->{pkg} = { CRITICAL => {}, WARNING => {}, EXCLUDE => {} };
  $self->{pkg}->{CRITICAL} = { map { $_ => 1 } split /,/, $crit } if $crit;
  $self->{pkg}->{WARNING}  = { map { $_ => 1 } split /,/, $warn } if $warn;
  $self->{pkg}->{EXCLUDE}  = { map { $_ => 1 } split /,/, $excl } if $excl;

  # Separate out wildcard package designations
  $self->{pkg_regex} = { CRITICAL => [], WARNING => [], EXCLUDE => [] };
  for my $level (qw(CRITICAL WARNING EXCLUDE)) {
    for my $pkg (keys %{$self->{pkg}->{$level}}) {
      if ($pkg =~ m/\*/) {
        delete $self->{pkg}->{$level}->{$pkg};
        # Turn glob-style package designation (e.g. kernel*) into regex
        $pkg =~ s/\*/.*/g;
        $pkg =~ s/^/^/;
        $pkg =~ s/$/\$/;
        print "Adding regex '$pkg' to $level package wildcards\n"
          if $self->{ng}->verbose >= 2;
        push @{$self->{pkg_regex}->{$level}}, $pkg;
      }
    }
  }
}

# Match the given repo against the entries in the repo hash
sub pkg_match
{
  my ($self, $pkg) = @_;
  return unless $pkg;

  # Check literal package names
  for my $level (qw(CRITICAL WARNING EXCLUDE)) {
    return $level if exists $self->{pkg}->{$level}->{$pkg};
  }

  # Check package regexes
  for my $level (qw(CRITICAL WARNING EXCLUDE)) {
    for my $re (@{$self->{pkg_regex}->{$level}}) {
      return $level if $pkg =~ m/$re/i;
    }
  }
}

# Setup repository data structures
sub repo_setup
{
  my ($self, $crit, $warn, $excl) = @_;

  $self->{repo} = { CRITICAL => {}, WARNING => {}, EXCLUDE => {} };
  $self->{repo}->{CRITICAL} = { map { $_ => 1 } split /,/, $crit } if $crit;
  $self->{repo}->{WARNING}  = { map { $_ => 1 } split /,/, $warn } if $warn;
  $self->{repo}->{EXCLUDE}  = { map { $_ => 1 } split /,/, $excl } if $excl;
}

# Match the given repo against the entries in the repo hash
sub repo_match
{
  my ($self, $repo) = @_;
  return unless $repo;
  for my $level (qw(CRITICAL WARNING EXCLUDE)) {
    return $level if exists $self->{repo}->{$level}->{$repo};
  }
}

# ------------------------------------------------------------------------

sub run_check
{
  my $self = shift;

  my $verbose = $self->{ng}->verbose;

  my $EXE = -x "/usr/sbin/$self->{mode}" ? "/usr/sbin/$self->{mode}" : "/usr/bin/$self->{mode}";
  my %EXE_ARGS = (
    yum => '-e0 -d0 check-update',
    up2date => '--nox --list',
  );

  nagios_exit(UNKNOWN, "invalid mode '$self->{mode}'") unless exists $EXE_ARGS{$self->{mode}};
  nagios_exit(UNKNOWN, "cannot find $EXE") unless -f $EXE && -x $EXE;

  my $default = $self->{ng}->default;
  nagios_exit(UNKNOWN, "invalid default '$default'")
    if $default && ! grep /^$default$/i, qw(c w x critical warning exclude);
  $default = uc substr($default,0,1);

  # Do the yum/up2date check
  alarm($self->{ng}->timeout);
  my $cmd = "$EXE $EXE_ARGS{$self->{mode}}";
  print "cmd: $cmd\n" if $verbose >= 2;
  my $out = `$cmd`;
  my $rc = $? >> 8;
  alarm(0);

  return ($rc, $out);
}

sub process_results
{
  my ($self, $rc, $out) = @_;
  my $verbose = $self->{ng}->verbose;

  # Up to date
  nagios_exit(OK, "all packages up to date") if $self->{mode} eq 'yum' && $rc == 0;

  # Unknown error
  nagios_exit(UNKNOWN, "$self->{mode} check failed ($rc):\n$out") if $self->{mode} eq 'yum' && $rc != 100;

  # Updates found, or up2date mode (rc's are bogus and inconsistent)
  my $results;
  # Get set of updates
  my $packages = $out;
  # I'm not sure this works, but I'm not using up2date much these days ... feedback/patches welcome
  if ($self->{mode} eq 'up2date') {
    $packages =~ s/^.*?-----\n//s;
    $packages =~ s/\n\n.*$//s;
    $packages =~ s/^\n.*$//s;
  } else {
    $packages =~ s/^.*\n\s*\n//s;
  }
  print "packages:\n$packages\n" if $verbose >= 2;
  my @updates = split /\s*\n/, $packages;
  unless (@updates) {
    $results = "all packages up to date\n";
    $results .= $packages if $verbose;
    nagios_exit(OK, $results);
  }

  # Iterate over update packages
  my @warning = ();
  my @critical = ();
  $self->pkg_setup($self->{ng}->critical, $self->{ng}->warning, $self->{ng}->exclude);
  $self->repo_setup($self->{ng}->get('critical-repo'), $self->{ng}->get('warning-repo'), $self->{ng}->get('exclude-repo'));
  for my $update (@updates) {
    my @field = split /\s+/, $update;
    next unless @field;

    # Categorise this package
    my $level = '';
    if ($level = $self->pkg_match($field[0])) {
      if ($level eq 'CRITICAL') {
        push @critical, $field[0];
      } elsif ($level eq 'WARNING') {
        push @warning, $field[0];
      } else {
        next;
      }
    } elsif ($level = $self->repo_match($field[$#field])) {
      if ($level eq 'CRITICAL') {
        push @critical, $field[0];
      } elsif ($level eq 'WARNING') {
        push @warning, $field[0];
      } else {
        next;
      }
    }
    # Fallback to default action
    elsif ($self->{ng}->default eq 'C') {
      push @critical, $field[0];
    } elsif ($self->{ng}->default eq 'W') {
      push @warning, $field[0];
    }
  }

  # Return OK unless we have critical or warning packages
  unless (@critical || @warning) {
    $results = "all packages up to date\n";
    $results .= sprintf("(%d updates found, but all excluded)\n",
      scalar(@updates)) if $verbose;
    $results .= $packages if $verbose;
    nagios_exit(OK, $results);
  }

  # Output results
  $results = sprintf "updates found: %d critical, %d warning\n",
    scalar(@critical), scalar(@warning);
  $results .= $packages if $verbose;

  nagios_exit(@critical ? CRITICAL : WARNING, $results);
}

sub run
{
  my $self = shift;
  my ($rc, $results) = $self->run_check;
  $self->process_results($rc, $results);
}

# Magic to check if we're being called directly, rather than as a module
unless (caller) {
  package main;
  my $self = check_yum->new;
  $self->getopts;
  $self->run;
}

1;

