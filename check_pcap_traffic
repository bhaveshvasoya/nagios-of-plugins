#!/usr/bin/perl -w
#
# Nagios plugin to check arbitrary interface traffic using pcap
#

use strict;
use File::Basename;
use IO::Socket;
use Nagios::Plugin;
use Net::Pcap qw(:functions);

# ----------------------------------------------------------------------------
# Main

my $np = Nagios::Plugin->new(
  usage => qq(Usage: %s [-v] [-i <interface>] [--timeout <secs>] <pcap_filter>\n),
  version => '0.1',
  url => 'http://www.openfusion.com.au/labs/nagios/',
  blurb => qq/This plugin tests for arbitrary interface traffic using pcap./,
  extra => qq/\nTypically requires root (or sudo) privileges./,
);
$np->add_arg(
  spec => "interface|i=s",
  help => q(-i, --interface=STRING
   Interface on which to listen. Default: 'any'),
  default => 'any');
$np->add_arg(
  spec => "warning|w=s",
  help => q(-w, --warning=RANGE
   Exit with WARNING status if packet count is outside the given range),
);
$np->add_arg(
  spec => "critical|c=s",
  help => q(-c, --critical=RANGE
   Exit with CRITICAL status if packet count is outside the given range),
);
$np->getopts;

$np->nagios_die("No pcap filter expression found") unless @ARGV;
my $filter_str = join(' ', @ARGV);

# Lookup 
my ($network, $netmask, $err);
my $int = $np->opts->interface;
if (pcap_lookupnet($int, \$network, \$netmask, \$err) < 0) {
  $np->nagios_die("Cannot get network settings on interface $int: $err");
}

# Instantiate $pcap
my $pcap = pcap_open_live($int, 20, 0, 1000, \$err)
  or $np->nagios_die("Cannot open interface $int: $err\n");
my $pcap_fd = pcap_get_selectable_fd($pcap);
my $pcap_fd_rin = '';
vec($pcap_fd_rin, $pcap_fd, 1) = 1;

# Add filter
my $filter;
if (pcap_compile($pcap, \$filter, $filter_str, 1, $netmask) < 0) {
  $np->nagios_die("Compile on filter_str '$filter_str': " . pcap_geterr($pcap));
}
pcap_setfilter($pcap, $filter);

# Set $pcap to non-blocking mode
if (pcap_setnonblock($pcap, 1, \$err) < 0) {
  $np->nagios_die("Failed setting non-blocking mode: $err");
}

my $count = 0;
alarm($np->opts->timeout);

# Return results in ALRM handler
$SIG{ALRM} = sub {
  $np->nagios_exit( CRITICAL, "No packets captured matching filter '$filter_str' on interface $int" )
    if $count == 0;

  # If used with thresholds, compare $count against them
  my $result = OK;
  if ($np->opts->critical || $np->opts->warning) {
    $result = $np->check_threshold( $count );
  }

  $np->nagios_exit(
    return_code   => $result,
    message       => "$count packet(s) captured matching filter '$filter_str' on interface $int",
  );
};

while (1) {
  # Count the currently available packets
  pcap_dispatch($pcap, 0, sub { $count++ }, {});

  # Select on the pcap_fd until more packets come in 
  select($pcap_fd_rin, undef, undef, 250);
}


# vim:ft=perl:ai:sw=2
