#!/usr/bin/perl -w
#
# check_newest_file - plugin to check various constraints on the newest
#   file in one or more given directories. Implemented as a wrapper around
#   the check_file plugin, so see that for details.
#

package check_newest_file;

use strict;
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Functions qw(nagios_die);
use FindBin qw($Bin);

use lib $Bin;
require 'check_file';
our @ISA;
push @ISA, qw(check_file);

use File::stat;

sub getopts {
  my $self = shift;
  my $ng = Nagios::Plugin::Getopt->new(
  usage => q(Usage: %s -d /path/to/directory [-f <fileglob>] [-m <mtime>] [-s <size>] [-c <count>]
         [-r <regex>] [-e <error-regex>] [-i] [-t timeout] [-v] [--warn-on <CONDITIONS>]),
  version => '0.04',
  url => 'http://www.openfusion.com.au/labs/nagios/',
  blurb => q(This plugin checks various constraints on the newest file in one or more directories.),
  extra => qq(Implemented as a wrapper around check_file, so see that plugin for details.),
  );

  $ng->arg(
  spec => "dir|d=s@",
  help => q(-d, --dir=PATH
   Directory within which to check newest file (may be glob, may be repeated)),
  required => 1);
  $ng->arg(
  spec => "file|f=s@",
  help => q(-f, --file=PATH
   Filename glob to check (may be repeated)),
  default => []);
  $ng->arg("mtime|m=s",
  q(-m, --mtime=MTIME
   Modification time of file (default: maximum age in seconds)));
  $ng->arg("size|s=s",
  q(-s, --size=SIZE
   Size of file (default: minimum size in bytes)));
  $ng->arg("count|c=s",
  q(-c, --count=COUNT
   (Minimum) Number of files that should exist (for use with globs)));
  $ng->arg("regex|r=s@",
  q(-r, --regex=REGEX
   Regex that should be found in file (may be repeated)));
  $ng->arg("error-regex|e=s@",
  q(-e, --error-regex=REGEX
   Regex that should NOT be found in file (may be repeated)));
  $ng->arg("ignore-case|i",
  q(-i, --ignore-case
   Ignore case in regex tests));
  $ng->arg("weekdays",
  q(--weekdays
   Tweak modification time tests to ignore weekends));
  $ng->arg("warn-on=s",
  q{--warn-on=WARN_CONDITIONS
   Issue warnings instead of criticals on listed conditions (comma-separated)
   Conditions: all|exists|mtime|size|count|regex|error-regex});

  $ng->getopts;

  # Find newest file in each directory
  my @file;
  my @dir = @{ $ng->dir };
  while (my $dir = shift @dir) {
    # Allow $dir to be a glob
    if ($dir =~ m/[*?]/) {
      push @dir, glob $dir;
      next;
    }
    nagios_die("Bad directory $dir") unless -d $dir;
    my $new_mtime = -1;
    my $new_file;
    my @filelist = ();
    if (@{ $ng->file }) {
      push @filelist, glob("$dir/$_") foreach @{ $ng->file };
    }
    else {
      @filelist = glob("$dir/*");
    }
    for my $file (@filelist) {
      next unless -f $file;
      my $st = stat($file);
      if ($st->mtime > $new_mtime) {
        $new_mtime = $st->mtime;
        $new_file = $file;
      }
    }
    push @file, $new_file if $new_file;
  }

  # Setup required file arg for check_file
  $ng->{file} = \@file;
  $ng->mk_ro_accessors(qw(file));

  $self->{ng} = $ng;
}

package main;
my $self = check_newest_file->new;
$self->getopts;
$self->run;

